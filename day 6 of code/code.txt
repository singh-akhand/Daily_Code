▶ BACKEND OF COURSE SELLING APP (part 1st)

▶️index.js file

const express = require("express");
const mongoose = require("mongoose");
require('dotenv').config();

const { userRouter } = require("./routes/user")
const { courseRouter } = require("./routes/course");
const { adminRouter } = require("./routes/admin");


const app = express();
app.use(express.json());

app.use("/api/v1/user", userRouter);
app.use("/api/v1/admin", adminRouter);
app.use("/api/v1/course", courseRouter);

async function main(){
    try {
        // Use connection string from .env
        await mongoose.connect(process.env.MONGO_URI);
        console.log("Connected to MongoDB");

        app.listen(3000, () => {
            console.log("Listening on port 3000");
        });
    } catch (err) {
        console.error("Failed to connect to MongoDB", err);
    }
}

main()

_____________________________________________________________________________

▶️ user.js file

const { Router } = require("express");
const { userModel } = require("../db");
const jwt = require("jsonwebtoken");
const JWT_USER_PASSWORD = ""

const userRouter = Router();

userRouter.post("/signup", async function(req, res){
    const { email, password, firstName, lastName } = req.body;

    try {
        await userModel.create({
            email: email,
            password: password,
            firstName: firstName,
            lastName: lastName
        })
    } catch(e){
        console.error("failed to signup!", e);
    };

    res.json({
        message:"signup succeeded",
    });
})

userRouter.post("/signin", async function(req, res){
    const { email, password } = req.body;

    const user = await userModel.findOne({
        email: email,
        password: password
    });

    if (user){
        const token = jwt.sign({
            id: user._id
        }, JWT_USER_PASSWORD);

        res.json({
            token: token
        })
    } else {

        res.status(403).json({
            message:"incorrect credentials",
        })
    }
})

userRouter.get("/purchases", function(req, res){
    res.json({
        message:"purchases endpoint",
    })
})

module.exports = {
    userRouter: userRouter
}

_____________________________________________________________________________

▶️ admin.js file

const { Router } = require("express");
const adminRouter = Router();
const { adminModel } = require("../db");


adminRouter.post("/signup", function(req, res){
    res.json({
        message:"signup endpoint",
    })
})

adminRouter.post("/signin", function(req, res){
    res.json({
        message:"signin endpoint",
    })
})

adminRouter.post("/course", function(req, res){
    res.json({
        message:"course endpoint",
    })
})

adminRouter.put("/course", function(req, res){
    res.json({
        message:"course endpoint",
    })
})

adminRouter.get("/course/bulk", function(req, res){
    res.json({
        message:"course endpoint",
    })
})

module.exports = {
    adminRouter: adminRouter
}

_____________________________________________________________________________

▶️ course.js file

const { Router } = require("express");

const courseRouter = Router();

courseRouter.post("/purchase", function(req, res){
    res.json({
        message:"purchase endpoint",
    })
})


courseRouter.get("/preview", function(req, res){
    res.json({
        message:"preview endpoint",
    })
})

module.exports = {
    courseRouter: courseRouter
}

_____________________________________________________________________________

▶️ db.js file

const mongoose = require("mongoose");
console.log("connected=>")

const Schema = mongoose.Schema;
const ObjectId = mongoose.Types.ObjectId;

const userSchema = new Schema({
    email: { type: String, unique: true },
    password: String,
    firstName: String,
    lastName: String,
});

const adminSchema = new Schema({
    email: { type: String, unique: true },
    password: String,
    firstName: String,
    lastName: String,
});

const courseSchema = new Schema({
    title: String,
    description: String,
    price: Number,
    imageUrl: String,
    creatorId: ObjectId,
});

const purchaseSchema = new Schema({
    userID: ObjectId,
    courseId: ObjectId
});

const userModel = mongoose.model("user", userSchema);
const adminModel = mongoose.model("admin", adminSchema);
const courseModel = mongoose.model("course", courseSchema);
const purchaseModel = mongoose.model("purchase", purchaseSchema);

module.exports = {
    userModel,
    adminModel,
    courseModel,
    purchaseModel
}
_____________________________________________________________________________

